create database case_study1
use case_study1

select * from fact
select * from Product
select * from location

--1. Display the number of states present in the LocationTable.
select count(distinct state) from location

--2. How many products are of regular type?
select count (*) from product where type = 'Regular'

--3. How much spending has been done on marketing of product ID 1?
select sum(marketing) from fact where productid=1

--4. What is the minimum sales of a product?
select min(sales) as minimumsales from fact

--5. Display the max Cost of Good Sold (COGS).
select max(cogs) from fact

--6. Display the details of the product where product type is coffee.
select * from product where product_type = 'coffee'

--7. Display the details where total expenses are greater than 40.
select * from fact where Total_Expenses >40

--8. What is the average sales in area code 719?
select avg(sales) from fact where Area_Code=719

--9. Find out the total profit generated by Colorado state
select sum(Profit),state from fact join location 
on fact.Area_Code=location.Area_Code
where state='colorado' group by state

--10. Display the average inventory for each product ID.
select avg(inventory),productid from fact group by productid

--11. Display state in a sequential order in a Location Table.
select state from Location order by state asc

--12. Display the average budget of the Product where the average budget
margin should be greater than 100.
select productid, avg(budget_margin) from fact group by productid
having avg(budget_margin)>100

--13. What is the total sales done on date 2010-01-01?
select sum(sales) from fact where date='2010-01-01'

--14. Display the average total expense of each product ID on an individual date.
select avg(total_expenses),productid,date from fact group by productid,date

--15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.
select f.Date,p.ProductId,p.Product_Type,p.Product,f.Sales,f.Profit,L.State,L.Area_Code from Fact f
inner join Location L on f.Area_Code = L.Area_Code
inner join Product P on f.ProductId = p.ProductId

--16. Display the rank without any gap to show the sales wise rank.
select Sales,rank()over(order by sales desc) as [Rank],DENSE_RANK()over(order by sales desc) as [DRank] from Fact

--17. Find the state wise profit and sales.
select L.State,sum(f.Profit) as [Total Profit],sum(Sales) as [Total Sales] from Fact f
inner join Location L
on f.Area_Code = L.Area_Code
group by L.State

--18. Find the state wise profit and sales along with the product name.
select L.State,p.Product,sum(f.Profit) as [Total Profit],sum(Sales) as [Total Sales]
from Fact f
inner join Location L on f.Area_Code = L.Area_Code
inner join Product P on f.ProductId = P.ProductId
group by L.State,p.Product

--19. If there is an increase in sales of 5%, calculate the increasedsales.
select Sales,(Sales * 1.05) as [Increased Sales] from Fact

--20. Find the maximum profit along with the product ID and producttype.
select p.ProductId,p.Product_Type ,max(f.Profit) as [Max Profit] from Fact f
inner join Product P on f.ProductId = p.ProductId
group by p.ProductId,p.Product_Type

--21. Create a stored procedure to fetch the result according to the product type from Product Table.
create procedure proc_produ @input varchar(30) as
select * from Product where Product_Type = @input
exec proc_produ 'coffee'
select * from Product

--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.
select *, case when Total_Expenses < 60 then 'Profit' else 'Loss' end as profit_loss from Fact

--23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.
select DATEPART(WEEK,Date) AS WeekNumber,Date,ProductID,SUM(Sales) AS WeeklySales
from fact group by ROLLUP(DATEPART(WEEK, Date), Date, ProductID)

--24. Apply union and intersection operator on the tables which consist of attribute area code.
-- Union
select Area_Code from Fact
union
select Area_Code from Location

-- Intersection
select Area_Code from Fact
Intersect
select Area_Code from Location

--25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.
create function GetProductsByType
(@ProductType nvarchar(50))
returns table 
as
return
(
    select ProductID, Product, Type
    from Product
    where Product_Type = @ProductType
)
select * from dbo.GetProductsByType('coffee')

--26. Change the product type from coffee to tea where product ID is 1 and undo it.
select * from fact
-- Update
update Product SET Product_Type = 'Tea' WHERE ProductID = 1
-- Undo
update Product SET Product_Type = 'Coffee' WHERE ProductID = 1

--27. Display the date, product ID and sales where total expenses are between 100 to 200.
select Date, ProductID, Sales, Total_Expenses
from Fact
where Total_Expenses between 100 and 200

--28. Delete the records in the Product Table for regular type.
select * from product
delete from Product where Type = 'Regular'
--29. Display the ASCII value of the fifth character from the columnProduct.
select *, ASCII(SUBSTRING(Product, 5, 1)) AS FifthCharASCII
from Product
